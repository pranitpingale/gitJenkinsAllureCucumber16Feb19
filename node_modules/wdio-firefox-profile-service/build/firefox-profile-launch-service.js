'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _firefoxProfile = require('firefox-profile');

var _firefoxProfile2 = _interopRequireDefault(_firefoxProfile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SPECIAL_PROPERTIES = ['extensions', 'proxy'];

var FirefoxProfileLaunchService = function () {
    function FirefoxProfileLaunchService() {
        _classCallCheck(this, FirefoxProfileLaunchService);
    }

    _createClass(FirefoxProfileLaunchService, [{
        key: 'onPrepare',

        /**
         * modify config and launch sauce connect
         */
        value: function onPrepare(config, caps) {
            var _this = this;

            this.config = config;
            this.caps = caps;

            /**
             * don't do anything if no profile is specified
             */
            if (!config.firefoxProfile) {
                return;
            }

            this.profile = new _firefoxProfile2.default();

            for (var preference in config.firefoxProfile) {
                /**
                 * extensions are getting set at the end
                 */
                if (SPECIAL_PROPERTIES.indexOf(preference) !== -1) {
                    continue;
                }

                this.profile.setPreference(preference, config.firefoxProfile[preference]);
            }

            if (this.config.firefoxProfile.proxy) {
                this.profile.setProxy(this.config.firefoxProfile.proxy);
            }

            this.profile.updatePreferences();

            if (!Array.isArray(config.firefoxProfile.extensions)) {
                return this.buildExtension();
            }

            return new Promise(function (resolve) {
                _this.profile.addExtensions(config.firefoxProfile.extensions, function () {
                    return resolve(_this.buildExtension());
                });
            });
        }
    }, {
        key: 'buildExtension',
        value: function buildExtension() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.profile.encoded(function (err, zippedProfile) {
                    if (err) {
                        console.error('Failed to encode Firefox profile: ' + err);
                        return reject(err);
                    }

                    /**
                     * apply profile for normal WebdriverIO instance
                     */
                    if (Array.isArray(_this2.caps)) {
                        _this2.caps.filter(function (cap) {
                            return cap.browserName === 'firefox';
                        }).forEach(function (cap) {
                            // for older firefox and geckodriver versions
                            cap.firefox_profile = zippedProfile;

                            // for firefox >= 56.0 and geckodriver >= 0.19.0
                            cap['moz:firefoxOptions'] = cap['moz:firefoxOptions'] || {};
                            cap['moz:firefoxOptions'].profile = zippedProfile;
                        });
                        return resolve();
                    }

                    /**
                     * apply profile for multiremote instance
                     */
                    for (var browser in _this2.caps) {
                        var cap = _this2.caps[browser].desiredCapabilities;
                        if (!cap || cap.browserName !== 'firefox') {
                            continue;
                        }

                        // for older firefox and geckodriver versions
                        cap.firefox_profile = zippedProfile;

                        // for firefox >= 56.0 and geckodriver >= 0.19.0
                        cap['moz:firefoxOptions'] = cap['moz:firefoxOptions'] || {};
                        cap['moz:firefoxOptions'].profile = zippedProfile;
                    }

                    return resolve();
                });
            });
        }
    }]);

    return FirefoxProfileLaunchService;
}();

exports.default = FirefoxProfileLaunchService;
module.exports = exports['default'];